local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Load UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/dementiaenjoyer/UI-LIBRARIES/refs/heads/main/wally-modified/source.lua"))()
local window = library:CreateWindow("Credit: Silent")

-- Autofarm Controls UI
window:Section("Autofarm Controls")

local autofarm = false
local hoverDistance = 10
local healThreshold = 0.3 -- 30% by default
local stuckTimeout = 10 -- seconds without enemy health change before reset

window:Toggle("Auto Farm", {}, function(value)
	autofarm = value
end)

window:Slider("Hover Distance", {
	min = 5,
	max = 50,
	default = 10,
}, function(value)
	hoverDistance = value
end)

window:Slider("Heal HP (%)", {
	min = 10,
	max = 100,
	default = 30,
}, function(value)
	healThreshold = value / 100
end)

-- Autofarm Logic
local hoverController = {
	currentEnemy = nil,
	currentTween = nil,
	connections = {}
}

local lastHealth = nil
local lastHealthCheckTime = 0

local function cleanUp()
	if hoverController.currentTween then
		hoverController.currentTween:Cancel()
	end
	for _, conn in ipairs(hoverController.connections) do
		conn:Disconnect()
	end
	hoverController.connections = {}
end

local function isValidEnemy(enemy)
	return enemy and enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChildOfClass("Humanoid") and enemy:FindFirstChildOfClass("Humanoid").Health > 0
end

local function findClosestEnemy(pos)
	local folder = workspace:FindFirstChild("Enemies")
	if not folder then return nil end

	local closest, dist = nil, math.huge
	for _, enemy in ipairs(folder:GetChildren()) do
		if isValidEnemy(enemy) then
			local d = (pos - enemy.HumanoidRootPart.Position).Magnitude
			if d < dist then
				dist = d
				closest = enemy
			end
		end
	end
	return closest
end

local function startDungeon()
	local dungeonRemote = ReplicatedStorage:WaitForChild("StartDungeon", 9e9)
	if dungeonRemote then
		dungeonRemote:FireServer(true)
	end
end


local function hoverAboveEnemy(character)
	if not hoverController.currentEnemy or not isValidEnemy(hoverController.currentEnemy) then return false end

	local root = character:FindFirstChild("HumanoidRootPart")
	local enemyRoot = hoverController.currentEnemy:FindFirstChild("HumanoidRootPart")
	if not root or not enemyRoot then return false end

	local enemyPos = enemyRoot.Position
	local enemyLook = enemyRoot.CFrame.LookVector.Unit

	local offsetBehind = -enemyLook * 5
	local offsetAbove = Vector3.new(0, hoverDistance, 0)
	local targetPos = enemyPos + offsetBehind + offsetAbove
	local lookAtCFrame = CFrame.new(targetPos, enemyPos)

	if (targetPos - root.Position).Magnitude > 1 then
		if hoverController.currentTween then
			hoverController.currentTween:Cancel()
		end

		local dummy = Instance.new("Part")
		dummy.Anchored = true
		dummy.CanCollide = false
		dummy.Transparency = 1
		dummy.Size = Vector3.new(0.1, 0.1, 0.1)
		dummy.CFrame = character:GetPivot()
		dummy.Parent = workspace

		local tween = TweenService:Create(dummy, TweenInfo.new(0.5, Enum.EasingStyle.Quad), { CFrame = lookAtCFrame })

		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			humanoid:ChangeState(Enum.HumanoidStateType.Physics)
		end

		local conn
		conn = RunService.Heartbeat:Connect(function()
			if dummy and character and character.Parent then
				character:PivotTo(dummy.CFrame)
			end
		end)

		table.insert(hoverController.connections, conn)
		tween.Completed:Connect(function()
			dummy:Destroy()
			conn:Disconnect()
			if humanoid then
				humanoid:ChangeState(Enum.HumanoidStateType.Running)
			end
		end)

		hoverController.currentTween = tween
		tween:Play()
	end

	return true
end

local function healthMonitor(character)
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid then return end

	humanoid.HealthChanged:Connect(function(health)
		local max = humanoid.MaxHealth
		if max == 0 then return end
		if (health / max) < healThreshold then
			local healPart = workspace:FindFirstChild("HealingZones") and workspace.HealingZones:FindFirstChild("Heal")
			local root = character:FindFirstChild("HumanoidRootPart")
			if healPart and root then
				healPart.CFrame = root.CFrame
			end
		end
	end)
end

local function startAutofarmLoop(player)
	cleanUp()
	startDungeon()
	local character = player.Character or player.CharacterAdded:Wait()
	if not character then return end

	healthMonitor(character)

	local swing = ReplicatedStorage:FindFirstChild("Swing")
	local spell = ReplicatedStorage:FindFirstChild("useSpell")

	local conn = RunService.Heartbeat:Connect(function()
		if not autofarm then return end
		if not swing or not spell then return end

		swing:FireServer()
		spell:FireServer("Q")
		spell:FireServer("E")

		if not hoverController.currentEnemy or not isValidEnemy(hoverController.currentEnemy) then
			hoverController.currentEnemy = findClosestEnemy(character:GetPivot().Position)
			lastHealth = nil
			lastHealthCheckTime = tick()
		end

		if hoverController.currentEnemy then
			hoverAboveEnemy(character)

			local humanoid = hoverController.currentEnemy:FindFirstChildOfClass("Humanoid")
			if humanoid then
				local currentTime = tick()
				if lastHealth == nil then
					lastHealth = humanoid.Health
					lastHealthCheckTime = currentTime
				elseif humanoid.Health < lastHealth then
					lastHealth = humanoid.Health
					lastHealthCheckTime = currentTime
				elseif currentTime - lastHealthCheckTime >= stuckTimeout then
					-- Enemy not taking damage, reset character
					local root = character:FindFirstChild("HumanoidRootPart")
					if root then
						root.CFrame = root.CFrame + Vector3.new(0, 1000, 0)
					end
					character:BreakJoints()
					lastHealth = nil
					lastHealthCheckTime = currentTime
				end
			end
		end
	end)

	table.insert(hoverController.connections, conn)
end

-- Player Setup
local player = Players.LocalPlayer

player.CharacterAdded:Connect(function(char)
	task.wait(1)
	if autofarm then
		startAutofarmLoop(player)
	end
end)

if player.Character then
	startAutofarmLoop(player)
end
